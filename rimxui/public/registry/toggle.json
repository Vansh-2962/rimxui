{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "toggle",
  "type": "registry:component",
  "author": "The RimxUi Team",
  "dependencies": [
    "class-variance-authority"
  ],
  "files": [
    {
      "path": "src/components/Toggle/Toggle.tsx",
      "content": "import * as React from \"react\";\r\nimport { cva, type VariantProps } from \"class-variance-authority\";\r\nimport { mc } from \"@/utils\";\r\n\r\nconst toggleVariants = cva(\r\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-white transition-colors hover:bg-gray-100 hover:text-gray-900 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-950 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-gray-100 data-[state=on]:text-gray-900 dark:ring-offset-gray-950 dark:hover:bg-gray-800 dark:hover:text-gray-50 dark:focus-visible:ring-gray-300 dark:data-[state=on]:bg-gray-800 dark:data-[state=on]:text-gray-50\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: \"bg-transparent\",\r\n        outline:\r\n          \"border border-gray-200 bg-transparent hover:bg-gray-100 hover:text-gray-900 dark:border-gray-800 dark:hover:bg-gray-800 dark:hover:text-gray-50\",\r\n      },\r\n      size: {\r\n        default: \"h-10 px-3\",\r\n        sm: \"h-9 px-2.5\",\r\n        lg: \"h-11 px-5\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n      size: \"default\",\r\n    },\r\n  },\r\n);\r\n\r\nexport interface ToggleProps\r\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\r\n    VariantProps<typeof toggleVariants> {\r\n  pressed?: boolean;\r\n  onPressedChange?: (pressed: boolean) => void;\r\n}\r\n\r\nconst Toggle = React.forwardRef<HTMLButtonElement, ToggleProps>(\r\n  (\r\n    { className, variant, size, pressed, onPressedChange, children, ...props },\r\n    ref,\r\n  ) => {\r\n    const [isPressed, setIsPressed] = React.useState(pressed || false);\r\n\r\n    React.useEffect(() => {\r\n      if (pressed !== undefined) {\r\n        setIsPressed(pressed);\r\n      }\r\n    }, [pressed]);\r\n\r\n    const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n      const newPressed = !isPressed;\r\n      setIsPressed(newPressed);\r\n      onPressedChange?.(newPressed);\r\n      props.onClick?.(event);\r\n    };\r\n\r\n    return (\r\n      <button\r\n        ref={ref}\r\n        type=\"button\"\r\n        aria-pressed={isPressed}\r\n        data-state={isPressed ? \"on\" : \"off\"}\r\n        className={mc(toggleVariants({ variant, size }), className)}\r\n        onClick={handleClick}\r\n        {...props}\r\n      >\r\n        {children}\r\n      </button>\r\n    );\r\n  },\r\n);\r\n\r\nToggle.displayName = \"Toggle\";\r\n\r\nexport { Toggle };\r\n",
      "type": "registry:component",
      "target": "src/components/ui/Toggle.tsx"
    }
  ]
}