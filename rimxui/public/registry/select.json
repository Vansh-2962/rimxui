{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "select",
  "type": "registry:component",
  "author": "The RimxUi Team",
  "dependencies": [
    "class-variance-authority"
  ],
  "files": [
    {
      "path": "src/components/Select/Select.tsx",
      "content": "import * as React from \"react\";\r\nimport { mc } from \"@/utils\";\r\nimport { Check, ChevronDown } from \"lucide-react\";\r\n\r\n// Context to share state between Select components\r\nconst SelectContext = React.createContext<{\r\n  value: string;\r\n  onValueChange: (value: string) => void;\r\n  open: boolean;\r\n  setOpen: React.Dispatch<React.SetStateAction<boolean>>;\r\n  name?: string;\r\n  className?:string;\r\n} | null>(null);\r\n\r\n// Hook to consume the Select context\r\nconst useSelectContext = () => {\r\n  const context = React.useContext(SelectContext);\r\n  if (!context) {\r\n    throw new Error(\"Select components must be used within a Select component\");\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface SelectProps {\r\n  children: React.ReactNode;\r\n  value?: string;\r\n  defaultValue?: string;\r\n  onValueChange?: (value: string) => void;\r\n  name?: string;\r\n}\r\n\r\nconst Select = React.forwardRef<HTMLDivElement, SelectProps>(\r\n  ({ children, value, defaultValue, onValueChange, name }, ref) => {\r\n    \r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const [internalValue, setInternalValue] = React.useState(\r\n      value || defaultValue || \"\",\r\n    );\r\n\r\n    // Update internal value when controlled value changes\r\n    React.useEffect(() => {\r\n      if (value !== undefined) {\r\n        setInternalValue(value);\r\n      }\r\n    }, [value]);\r\n\r\n    const handleValueChange = React.useCallback(\r\n      (newValue: string) => {\r\n        if (value === undefined) {\r\n          setInternalValue(newValue);\r\n        }\r\n        onValueChange?.(newValue);\r\n        setOpen(false);\r\n      },\r\n      [value, onValueChange],\r\n    );\r\n\r\n    return (\r\n      <SelectContext.Provider\r\n        value={{\r\n          value: internalValue,\r\n          onValueChange: handleValueChange,\r\n          open,\r\n          setOpen,\r\n          name,\r\n          \r\n        }}\r\n      >\r\n        <div ref={ref} className=\"relative\">\r\n          {children}\r\n        </div>\r\n      </SelectContext.Provider>\r\n    );\r\n  },\r\n);\r\n\r\nSelect.displayName = \"Select\";\r\n\r\ninterface SelectTriggerProps extends React.HTMLAttributes<HTMLButtonElement> {\r\n  children: React.ReactNode;\r\n  className?: string;\r\n}\r\n\r\nconst SelectTrigger = React.forwardRef<HTMLButtonElement, SelectTriggerProps>(\r\n  ({ children, className, ...props }, ref) => {\r\n    const { open, setOpen } = useSelectContext();\r\n    \r\n    return (\r\n      <button\r\n        ref={ref}\r\n        type=\"button\"\r\n        role=\"combobox\"\r\n        aria-expanded={open}\r\n        className={mc(\r\n          \"flex h-10 items-center justify-between rounded-md border border-gray-200 px-3 py-2 text-sm ring-offset-white placeholder:text-gray-500 focus:outline-none focus:ring-2 focus:ring-gray-950 focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 dark:border-gray-800 dark:bg-gray-950 dark:ring-offset-gray-950 dark:placeholder:text-gray-400 dark:focus:ring-gray-300\",\r\n          className,\r\n        )}\r\n        onClick={() => setOpen(!open)}\r\n        {...props}\r\n      >\r\n        {children}\r\n        <ChevronDown className=\"h-4 w-4 opacity-50\" />\r\n      </button>\r\n    );\r\n  },\r\n);\r\n\r\nSelectTrigger.displayName = \"SelectTrigger\";\r\n\r\ninterface SelectValueProps {\r\n  placeholder?: string;\r\n  className?: string;\r\n}\r\n\r\nconst SelectValue = React.forwardRef<HTMLSpanElement, SelectValueProps>(\r\n  ({ placeholder, className }, ref) => {\r\n    const { value } = useSelectContext();\r\n\r\n    return (\r\n      <span ref={ref} className={mc(\"block truncate\", className)}>\r\n        {value ? value : placeholder}\r\n      </span>\r\n    );\r\n  },\r\n);\r\n\r\nSelectValue.displayName = \"SelectValue\";\r\n\r\ninterface SelectContentProps {\r\n  children: React.ReactNode;\r\n  className?: string;\r\n}\r\n\r\nconst SelectContent = React.forwardRef<HTMLDivElement, SelectContentProps>(\r\n  ({ children, className }, ref) => {\r\n    const { open } = useSelectContext();\r\n\r\n    if (!open) return null;\r\n\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        className={mc(\r\n          \"absolute z-50 w-[180px] overflow-hidden rounded-md border border-gray-200 text-gray-950 shadow-md animate-in fade-in-80 dark:border-gray-800 dark:bg-gray-950 dark:text-gray-50\",\r\n          \"mt-1\",\r\n          className,\r\n        )}\r\n      >\r\n        <div>{children}</div>\r\n      </div>\r\n    );\r\n  },\r\n);\r\n\r\nSelectContent.displayName = \"SelectContent\";\r\n\r\ninterface SelectItemProps extends React.HTMLAttributes<HTMLDivElement> {\r\n  value: string;\r\n  children: React.ReactNode;\r\n  className?: string;\r\n}\r\n\r\nconst SelectItem = React.forwardRef<HTMLDivElement, SelectItemProps>(\r\n  ({ value: itemValue, children, className, ...props }, ref) => {\r\n    const { value, onValueChange } = useSelectContext();\r\n    const selected = value === itemValue;\r\n\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        role=\"option\"\r\n        aria-selected={selected}\r\n        data-value={itemValue}\r\n        data-selected={selected}\r\n        className={mc(\r\n          \"relative cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 hover:bg-gray-100 focus:bg-gray-100 dark:hover:bg-gray-800 dark:focus:bg-gray-800\",\r\n          className,\r\n        )}\r\n        onClick={() => onValueChange(itemValue)}\r\n        {...props}\r\n      >\r\n        <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\r\n          {selected && <Check className=\"h-4 w-4\" />}\r\n        </span>\r\n        <span className=\"text-sm\">{children}</span>\r\n      </div>\r\n    );\r\n  },\r\n);\r\n\r\nSelectItem.displayName = \"SelectItem\";\r\n\r\nexport { Select, SelectTrigger, SelectValue, SelectContent, SelectItem };\r\n",
      "type": "registry:component",
      "target": "src/components/ui/Select.tsx"
    }
  ]
}